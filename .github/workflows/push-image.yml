name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # Change this if your default branch is different
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  ORG_NAME: ${{ vars.ORG_NAME }}  # Read organization from repo variables
  IMAGE_NAME: ${{ vars.ORG_NAME }}/ps

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          use: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_APIS_PS }}

      - name: Extract Metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            latest

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy Files to Target Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml,.env.example"
          target: "~/ps"

      - name: Copy and Execute Deployment Steps
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
  
            DEPLOY_DIR="$HOME/ps"
  
            if [ ! -f "$DEPLOY_DIR/.env" ]; then
                echo "First-time setup: Please update the .env file in $DEPLOY_DIR before starting services."
                exit 0
            fi
  
            echo "Pulling latest Docker image..."
            cd "$DEPLOY_DIR"
            docker compose pull
  
            echo "Restarting Docker services..."
            docker compose down
            docker compose up -d
  
            echo "Deployment completed."
